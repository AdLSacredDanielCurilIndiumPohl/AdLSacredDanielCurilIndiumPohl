version: '3.8'

services:
  # Datenbank-Services
  postgres:
    build: ./connectors/postgresql
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 30s
      timeout: 3s
    networks:
      - db-network

  mongodb:
    build: ./connectors/mongodb
    environment:
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo_password
    secrets:
      - mongo_password
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - db-network

  redis:
    build: ./connectors/redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    command: redis-server --bind 0.0.0.0 --protected-mode no
    networks:
      - db-network
      - tool-network

  neo4j:
    build: ./connectors/neo4j
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
    volumes:
      - neo4j_data:/data
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - db-network

  # Vault Service
  vault:
    image: vault:latest
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dev-token
    volumes:
      - ./vault:/vault/config
      - vault_data:/vault/data
    ports:
      - "8200:8200"
    networks:
      - tool-network
      - db-network

  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    depends_on:
      - vault
      - postgres
      - mongodb
      - redis
      - neo4j
    environment:
      - VAULT_TOKEN=dev-token
    ports:
      - "8000:8000"
    networks:
      - frontend-network
      - tool-network

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - gateway
    networks:
      - frontend-network

  # Sichere private Registry
  registry:
    image: registry:2
    environment:
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_REALM=Registry
      - REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd
      - REGISTRY_STORAGE_DELETE_ENABLED=true
    volumes:
      - ./auth:/auth
      - registry_data:/var/lib/registry
    ports:
      - "5000:5000"
    networks:
      - tool-network

  auth-proxy:
    image: nginx:alpine
    volumes:
      - ./auth/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8443:443"
    depends_on:
      - registry
      - gateway

  # Zentraler Auth-Service
  auth-service:
    build: 
      context: ./auth
      dockerfile: Dockerfile
    environment:
      - VAULT_TOKEN=dev-token
      - VAULT_ADDR=http://vault:8200
    volumes:
      - ./auth:/auth
    ports:
      - "8444:8444"
    depends_on:
      - vault
      - redis
    networks:
      - tool-network
      - frontend-network
      - db-network

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  neo4j_data:
  vault_data:
  registry_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  mongo_password:
    file: ./secrets/mongo_password.txt
  redis_password:
    file: ./secrets/redis_password.txt

networks:
  tool-network:
    driver: bridge
    internal: true
  frontend-network:
    driver: bridge
  db-network:
    driver: bridge
    internal: true